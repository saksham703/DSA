// find the length of the Longest Common Subsequence (LCS)
// TC:- O(2^m+n).

import java.util.*;

class TUF {
   
    static int lcsUtil(String s1, String s2, int ind1, int ind2, int[][] dp) {
     
        if (ind1 <0 || ind2 < 0)  return 0;
            
        if(ind1 == 0 || ind2 == 0) return 0;

        if (dp[ind1][ind2] != -1)
            return dp[ind1][ind2];

        // If the characters at the current indices are the same, increment the LCS length
        if (s1.charAt(ind1-1) == s2.charAt(ind2-1))
            return dp[ind1][ind2] = 1 + lcsUtil(s1, s2, ind1 - 1, ind2 - 1, dp);

        // If the characters are different, choose the maximum LCS length by either
        // skipping a character in s1 or skipping a character in s2
        else
            return dp[ind1][ind2] = Math.max(lcsUtil(s1, s2, ind1, ind2 - 1, dp),
                    lcsUtil(s1, s2, ind1 - 1, ind2, dp));
    }

 
    public static void main(String args[]) {
        String s1 = "acd";
        String s2 = "ced";
        
        int n = s1.length();
        int m = s2.length();
     
        int dp[][] = new int[n+1][m+1];

        for (int rows[] : dp)
            Arrays.fill(rows, -1);

      int ans = lcsUtil(s1, s2, n , m,dp);
      
        System.out.println("The Length of Longest Common Subsequence is " + ans);
    }
}
