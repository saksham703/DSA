//print length of longest palindromic subsequence(lps)

// eg:- for str = BBABCBCAB, BABCBAB” is the lps. when str[i] == str[j], then take both the characters in the lps, if not, find which part of the string either f(s,i,j-1) or f(s,i-1,j) gives lcs. BC is when we have only one element left(i==j), include it in lps(ie return 1) or we dont any element (i>j) then length of lcs is 0(ie:- return 0).
// OW:- equal/not-equal , TC:- O(2^n).
public class Solution {		
	private static int longestPalindromeSubsequenceHelper(String s, int i, int j,int[][] dp) {

		// Base Case 1: If there is only 1 character.
		if (i == j) {
			return 1;
		}

       if(i > j){
          return 0;
    }
	
		
		if(dp[i][j] != -1) return dp[i][j];

		// If the first and last characters match.
		if (s.charAt(i) == s.charAt(j)) {
			return dp[i][j] = longestPalindromeSubsequenceHelper(s, i + 1, j - 1,dp) + 2;
		}

		// If the first and last characters do not match
		
		int op1 = 0, op2=0;
		
		op1 = longestPalindromeSubsequenceHelper(s, i, j - 1,dp);
		 op2 = longestPalindromeSubsequenceHelper(s, i + 1, j, dp);

		return dp[i][j] = Math.max(op1, op2);
	}

	// Returns the length of the longest palindromic subsequence in the string s.
	
public static void main(String[] args){
    String s = "bbbab";
    int n = s.length();
 int dp[][] = new int[n+1][n+1];
 for(int i=0;i<=n;i++){
     for(int j=0;j<=n;j++){
         dp[i][j] = -1;
     }
 }
 int ans = longestPalindromeSubsequenceHelper(s, 0, s.length() - 1,dp);
 
 System.out.println(ans);
}
}
