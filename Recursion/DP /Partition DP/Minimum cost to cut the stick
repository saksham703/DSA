// Minimum cost to cut the stick

// consider {0,1,3,4,5,7}, initally i at 1 & j at 5. we have to make partitions from(i->j).  we have f(1,4). Lets say first partition at index 3(element 4), then lengtth = a[j+1]-a[i-1]=7-0=7. we move to f(1,2) & f(4,4). At f(1,2), make cut at index 2 (element 3), then length = a[j+1]-[i-1] = 4-0 = 4.(cause 4 element at index 3 (0,1,2,3)); After cut at index 2(element 3), we have function calls as f(1,1) & f(3,2) -> In this case since i>j we return length = 0;

// try out every partition(every cut) find find whats the min length it gives.

// Recursive TC :- exponential.
// OW : cuts

import java.util.*;

public class TUF {
    // Recursive function to calculate the minimum cost
    static int f(int i, int j, ArrayList<Integer> cuts, int[][] dp) {
        // Base case
        if (i > j) {
            return 0;
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        
        int mini = Integer.MAX_VALUE;

        for (int ind = i; ind <= j; ind++) {
           int ans = cuts.get(j + 1) - cuts.get(i - 1) +
                      f(i, ind - 1, cuts, dp) +
                      f(ind + 1, j, cuts, dp);

            mini = Math.min(mini, ans);
        }

        return dp[i][j] = mini;
    }


    public static void main(String[] args) {
        ArrayList<Integer> cuts = new ArrayList<>(Arrays.asList(3, 5, 1, 4));        
        int n = 7;
        cuts.add(n);
        cuts.add(0);
        Collections.sort(cuts);
        int j = cuts.size();
// new array -> {0,1,3,4,5,7}.
        int[][] dp = new int[j+1][j+1];
     
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        
// we have pass 1 & cuts.size-2 as i & j since we have to make cuts from(i->j).
    int ans = f(1,cuts.size()-2,cuts, dp);
        
        System.out.println("The minimum cost incurred: " + ans);
    }
}

