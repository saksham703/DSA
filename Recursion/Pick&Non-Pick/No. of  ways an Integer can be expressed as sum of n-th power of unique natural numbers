// Find no. of  ways an Integer can be expressed as sum of n-th power of unique natural numbers 

import java.util.*;

public class Main {
    public static int totalPowerSum(int N, int p, int n,int i) {
      
      if(i==p+1){
      if(N==0){
          return 1;
      }
       return 0;
      }
   
   
   
  N = N - (int)Math.pow(i,n);
 int left =  totalPowerSum(N,p,n,i+1);
  	N = N+ (int)Math.pow(i,n);
  
              
int right =  totalPowerSum(N,p,n,i+1);
  
 return left + right; 
              
  }
    
    public static void main(String[] args) {
        int N = 100;
        int n = 2;
        int p = (int)Math.sqrt(N);
     
        
        int result = totalPowerSum(N, p, n,1);
        System.out.println(result);
    }
    
}

// based on pick,  non pick pattern:
//  pick,non pick  from [(1-> âˆšn)]
// 1^2+3^2+7^2


//  T.C:- O(2^n) && S.C:- O(p)
